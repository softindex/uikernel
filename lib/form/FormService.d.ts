import type { EventListener } from '../common/types';
import ValidationErrors from '../validation/ValidationErrors';
import type { FormModelListenerArgsByEventName } from './types/FormModelListenerArgsByEventName';
import type { FormServiceEmptyState, FormServiceParams, FormServiceState, FormServiceListenerArgsByEventName } from './types/IFormService';
import type IFormService from './types/IFormService';
declare class FormService<TEditableRecord extends Record<string, unknown>, TRecord extends TEditableRecord, TAvailableField extends keyof TRecord & string> implements IFormService<TEditableRecord, TRecord, TAvailableField> {
    validating: boolean;
    submitting: boolean;
    private eventEmitter;
    private errors;
    private warnings;
    private hiddenValidationFields;
    private changes;
    private fields;
    private partialErrorChecking;
    private partialErrorCheckingDefault;
    private submitAll;
    private initializedState;
    constructor(fields?: TAvailableField[] | undefined);
    init({ fields, model, data, changes, warningsValidator, partialErrorChecking, submitAll }: FormServiceParams<TEditableRecord, TRecord, TAvailableField, FormModelListenerArgsByEventName<TRecord>>): Promise<void>;
    getAll(): FormServiceEmptyState<TRecord, TAvailableField, keyof TEditableRecord & string> | FormServiceState<TRecord, TAvailableField, keyof TEditableRecord & string>;
    updateField: <TField extends keyof TRecord & string>(field: TField, value: Element | TRecord[TField], validate?: boolean) => Promise<void>;
    addChangeListener(func: EventListener<FormServiceListenerArgsByEventName<TRecord, TAvailableField, keyof TEditableRecord & string>['update']>): void;
    removeChangeListener(func: (state: ReturnType<IFormService<TEditableRecord, TRecord, TAvailableField>['getAll']>) => void): void;
    removeAllListeners(): void;
    clearValidation: (fields: (keyof TRecord & string)[] | (keyof TRecord & string)) => void;
    clearError: (field: keyof TRecord & string) => void;
    validateField: <TField extends keyof TRecord & string>(field: TField, value: Element | TRecord[TField]) => Promise<void>;
    set(data: Partial<TRecord>, validate?: boolean): Promise<void>;
    submitData(data: Partial<TRecord>): Promise<Partial<TRecord> | undefined>;
    submit(): Promise<Partial<TRecord> | undefined>;
    clearFieldChanges(field: keyof TEditableRecord & TAvailableField): void;
    clearChanges: () => void;
    setPartialErrorChecking(value: boolean): void;
    getPartialErrorChecking(): boolean;
    validateForm: () => Promise<{
        errors: ValidationErrors<keyof TEditableRecord & string> | null;
        warnings: ValidationErrors<keyof TEditableRecord & string> | null;
    } | undefined>;
    private throttledValidateForm;
    private getFields;
    private isLoaded;
    private getChangesFields;
    private getDisplayedErrors;
    private setState;
    private onModelChange;
    private getData;
    private getChanges;
    private isDependentField;
    private runValidator;
    private getEmptyState;
}
export default FormService;
